// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/models/updated_location.dart';
import 'src/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8921189876395331774),
      name: 'UpdatedLocation',
      lastPropertyId: const IdUid(5, 4835441628037671263),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7388448626585123113),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8754240784347989171),
            name: 'lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1626796509314740125),
            name: 'long',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9214991628475342574),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4835441628037671263),
            name: 'userIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5105394454548776933),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2656482876802564536),
      name: 'User',
      lastPropertyId: const IdUid(6, 2142981369530805423),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 552242757022212217),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5198206948013360028),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6070868692773321435),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6482608718030388251),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6690010724035084466),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2142981369530805423),
            name: 'completed',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2656482876802564536),
      lastIndexId: const IdUid(1, 5105394454548776933),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UpdatedLocation: EntityDefinition<UpdatedLocation>(
        model: _entities[0],
        toOneRelations: (UpdatedLocation object) => [object.userId],
        toManyRelations: (UpdatedLocation object) => {},
        getId: (UpdatedLocation object) => object.id,
        setId: (UpdatedLocation object, int id) {
          object.id = id;
        },
        objectToFB: (UpdatedLocation object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.lat);
          fbb.addFloat64(2, object.long);
          fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.userId.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = UpdatedLocation(
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.userId.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.userId.attach(store);
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final countryOffset = fbb.writeString(object.country);
          final genderOffset = fbb.writeString(object.gender);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, countryOffset);
          fbb.addOffset(4, genderOffset);
          fbb.addBool(5, object.completed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              completed: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UpdatedLocation] entity fields to define ObjectBox queries.
class UpdatedLocation_ {
  /// see [UpdatedLocation.id]
  static final id =
      QueryIntegerProperty<UpdatedLocation>(_entities[0].properties[0]);

  /// see [UpdatedLocation.lat]
  static final lat =
      QueryDoubleProperty<UpdatedLocation>(_entities[0].properties[1]);

  /// see [UpdatedLocation.long]
  static final long =
      QueryDoubleProperty<UpdatedLocation>(_entities[0].properties[2]);

  /// see [UpdatedLocation.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<UpdatedLocation>(_entities[0].properties[3]);

  /// see [UpdatedLocation.userId]
  static final userId =
      QueryRelationToOne<UpdatedLocation, User>(_entities[0].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[1].properties[1]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[1].properties[2]);

  /// see [User.country]
  static final country = QueryStringProperty<User>(_entities[1].properties[3]);

  /// see [User.gender]
  static final gender = QueryStringProperty<User>(_entities[1].properties[4]);

  /// see [User.completed]
  static final completed =
      QueryBooleanProperty<User>(_entities[1].properties[5]);
}
